(in-package #:gfxmath.test)

(plan nil)

(progn
  (oa= (m:mat 2) (u:make-f64-array 4) "matrix2: mat")
  (oa= (m:mat 3) (u:make-f64-array 9) "matrix3: mat")
  (oa= (m:mat 4) (u:make-f64-array 16) "matrix4: mat")
  (oa= (m:mat/id 2) #(1 0 0 1) "matrix2: mat/id")
  (oa= (m:mat/id 3) #(1 0 0 0 1 0 0 0 1) "matrix3: mat/id")
  (oa= (m:mat/id 4) #(1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1) "matrix4: mat/id")
  (oa= (m:mat/from-vecs (v 1 2) (v 3 4)) #(1 2 3 4) "matrix2: mat/from-vecs")
  (oa= (m:mat/from-vecs (v 1 2 3) (v 4 5 6) (v 7 8 9)) #(1 2 3 4 5 6 7 8 9) "matrix3: mat/from-vecs")
  (oa= (m:mat/from-vecs (v 1 2 3 4) (v 5 6 7 8) (v 9 10 11 12) (v 13 14 15 16))
       #(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)
       "matrix4: mat/from-vecs")
  (oa= (m:mat/from-mat 2 (m (v 1 2) (v 3 4))) #(1 2 3 4)
       "matrix2: mat/from-mat: matrix2")
  (oa= (m:mat/from-mat 2 (m (v 1 2 3) (v 4 5 6) (v 7 8 9))) #(1 2 4 5)
       "matrix2: mat/from-mat: matrix3")
  (oa= (m:mat/from-mat 2 (m (v 1 2 3 4) (v 5 6 7 8) (v 9 10 11 12) (v 13 14 15 16)))
       #(1 2 5 6)
       "matrix2: mat/from-mat: matrix4")
  (oa= (m:mat/from-mat 3 (m (v 1 2) (v 3 4))) #(1 2 0 3 4 0 0 0 1)
       "matrix3: mat/from-mat: matrix2")
  (oa= (m:mat/from-mat 3 (m (v 1 2 3) (v 4 5 6) (v 7 8 9))) #(1 2 3 4 5 6 7 8 9)
       "matrix3: mat/from-mat: matrix3")
  (oa= (m:mat/from-mat 3 (m (v 1 2 3 4) (v 5 6 7 8) (v 9 10 11 12) (v 13 14 15 16)))
       #(1 2 3 5 6 7 9 10 11)
       "matrix3: mat/from-mat: matrix4")
  (oa= (m:mat/from-mat 4 (m (v 1 2) (v 3 4))) #(1 2 0 0 3 4 0 0 0 0 1 0 0 0 0 1)
       "matrix4: mat/from-mat: matrix2")
  (oa= (m:mat/from-mat 4 (m (v 1 2 3) (v 4 5 6) (v 7 8 9)))
       #(1 2 3 0 4 5 6 0 7 8 9 0 0 0 0 1)
       "matrix4: mat/from-mat: matrix3")
  (oa= (m:mat/from-mat 4 (m (v 1 2 3 4) (v 5 6 7 8) (v 9 10 11 12) (v 13 14 15 16)))
       #(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)
       "matrix4: mat/from-mat: matrix4")
  (o/= (m:mat/random 2) (m:mat/random 2) "matrix2: mat/random")
  (o/= (m:mat/random 3) (m:mat/random 3) "matrix3: mat/random")
  (o/= (m:mat/random 4) (m:mat/random 4) "matrix4: mat/random")
  (o= (m:mat/rotation 2 :z (/ pi 4))
      (m (v 0.7071068 0.7071068) (v -0.7071068 0.7071068))
      "matrix2: mat/rotation: z")
  (o= (m:mat/rotation 3 :x (/ pi 4))
      (m (v 1 0 0) (v 0 0.7071068 0.7071068) (v 0 -0.7071068 0.7071068))
      "matrix3: mat/rotation: x")
  (o= (m:mat/rotation 3 :y (/ pi 4))
      (m (v 0.7071068 0 -0.7071068) (v 0 1 0) (v 0.7071068 0 0.7071068))
      "matrix3: mat/rotation: y")
  (o= (m:mat/rotation 3 :z (/ pi 4))
      (m (v 0.7071068 0.7071068 0) (v -0.7071068 0.7071068 0) (v 0 0 1))
      "matrix3: mat/rotation: z")
  (o= (m:mat/rotation 4 :x (/ pi 4))
      (m (v 1 0 0 0) (v 0 0.7071068 0.7071068 0) (v 0 -0.7071068 0.7071068 0) (v 0 0 0 1))
      "matrix4: mat/rotation: x")
  (o= (m:mat/rotation 4 :y (/ pi 4))
      (m (v 0.7071068 0 -0.7071068 0) (v 0 1 0 0) (v 0.7071068 0 0.7071068 0) (v 0 0 0 1))
      "matrix4: mat/rotation: y")
  (o= (m:mat/rotation 4 :z (/ pi 4))
      (m (v 0.7071068 0.7071068 0 0) (v -0.7071068 0.7071068 0 0) (v 0 0 1 0) (v 0 0 0 1))
      "matrix4: mat/rotation: z"))

(let ((m2 (m (v 1 2) (v 3 4)))
      (m3 (m (v 1 2 3) (v 4 5 6) (v 7 8 9)))
      (m4 (m (v 1 2 3 4) (v 5 6 7 8) (v 9 10 11 12) (v 13 14 15 16))))
  (s= (m:ref m2 0) 1 "matrix2: read index 0")
  (s= (m:ref m2 1) 2 "matrix2: read index 1")
  (s= (m:ref m2 2) 3 "matrix2: read index 2")
  (s= (m:ref m2 3) 4 "matrix2: read index 3")
  (s= (m:ref m3 0) 1 "matrix3: read index 0")
  (s= (m:ref m3 1) 2 "matrix3: read index 1")
  (s= (m:ref m3 2) 3 "matrix3: read index 2")
  (s= (m:ref m3 3) 4 "matrix3: read index 3")
  (s= (m:ref m3 4) 5 "matrix3: read index 4")
  (s= (m:ref m3 5) 6 "matrix3: read index 5")
  (s= (m:ref m3 6) 7 "matrix3: read index 6")
  (s= (m:ref m3 7) 8 "matrix3: read index 7")
  (s= (m:ref m3 8) 9 "matrix3: read index 8")
  (s= (m:ref m4 0) 1 "matrix4: read index 0")
  (s= (m:ref m4 1) 2 "matrix4: read index 1")
  (s= (m:ref m4 2) 3 "matrix4: read index 2")
  (s= (m:ref m4 3) 4 "matrix4: read index 3")
  (s= (m:ref m4 4) 5 "matrix4: read index 4")
  (s= (m:ref m4 5) 6 "matrix4: read index 5")
  (s= (m:ref m4 6) 7 "matrix4: read index 6")
  (s= (m:ref m4 7) 8 "matrix4: read index 7")
  (s= (m:ref m4 8) 9 "matrix4: read index 8")
  (s= (m:ref m4 9) 10 "matrix4: read index 9")
  (s= (m:ref m4 10) 11 "matrix4: read index 10")
  (s= (m:ref m4 11) 12 "matrix4: read index 11")
  (s= (m:ref m4 12) 13 "matrix4: read index 12")
  (s= (m:ref m4 13) 14 "matrix4: read index 13")
  (s= (m:ref m4 14) 15 "matrix4: read index 14")
  (s= (m:ref m4 15) 16 "matrix4: read index 15")
  (setf (m:ref m2 0) 5)
  (setf (m:ref m2 1) 6)
  (setf (m:ref m2 2) 7)
  (setf (m:ref m2 3) 8)
  (setf (m:ref m3 0) 10)
  (setf (m:ref m3 1) 11)
  (setf (m:ref m3 2) 12)
  (setf (m:ref m3 3) 13)
  (setf (m:ref m3 4) 14)
  (setf (m:ref m3 5) 15)
  (setf (m:ref m3 6) 16)
  (setf (m:ref m3 7) 17)
  (setf (m:ref m3 8) 18)
  (setf (m:ref m4 0) 17)
  (setf (m:ref m4 1) 18)
  (setf (m:ref m4 2) 19)
  (setf (m:ref m4 3) 20)
  (setf (m:ref m4 4) 21)
  (setf (m:ref m4 5) 22)
  (setf (m:ref m4 6) 23)
  (setf (m:ref m4 7) 24)
  (setf (m:ref m4 8) 25)
  (setf (m:ref m4 9) 26)
  (setf (m:ref m4 10) 27)
  (setf (m:ref m4 11) 28)
  (setf (m:ref m4 12) 29)
  (setf (m:ref m4 13) 30)
  (setf (m:ref m4 14) 31)
  (setf (m:ref m4 15) 32)
  (s= (m:ref m2 0) 5 "matrix2: write index 0")
  (s= (m:ref m2 1) 6 "matrix2: write index 1")
  (s= (m:ref m2 2) 7 "matrix2: write index 2")
  (s= (m:ref m2 3) 8 "matrix2: write index 3")
  (s= (m:ref m3 0) 10 "matrix3: write index 0")
  (s= (m:ref m3 1) 11 "matrix3: write index 1")
  (s= (m:ref m3 2) 12 "matrix3: write index 2")
  (s= (m:ref m3 3) 13 "matrix3: write index 3")
  (s= (m:ref m3 4) 14 "matrix3: write index 4")
  (s= (m:ref m3 5) 15 "matrix3: write index 5")
  (s= (m:ref m3 6) 16 "matrix3: write index 6")
  (s= (m:ref m3 7) 17 "matrix3: write index 7")
  (s= (m:ref m3 8) 18 "matrix3: write index 8")
  (s= (m:ref m4 0) 17 "matrix4: write index 0")
  (s= (m:ref m4 1) 18 "matrix4: write index 1")
  (s= (m:ref m4 2) 19 "matrix4: write index 2")
  (s= (m:ref m4 3) 20 "matrix4: write index 3")
  (s= (m:ref m4 4) 21 "matrix4: write index 4")
  (s= (m:ref m4 5) 22 "matrix4: write index 5")
  (s= (m:ref m4 6) 23 "matrix4: write index 6")
  (s= (m:ref m4 7) 24 "matrix4: write index 7")
  (s= (m:ref m4 8) 25 "matrix4: write index 8")
  (s= (m:ref m4 9) 26 "matrix4: write index 9")
  (s= (m:ref m4 10) 27 "matrix4: write index 10")
  (s= (m:ref m4 11) 28 "matrix4: write index 11")
  (s= (m:ref m4 12) 29 "matrix4: write index 12")
  (s= (m:ref m4 13) 30 "matrix4: write index 13")
  (s= (m:ref m4 14) 31 "matrix4: write index 14")
  (s= (m:ref m4 15) 32 "matrix4: write index 15"))

(let ((m2 (m (v 1 2) (v 3 4)))
      (m3 (m (v 1 2 3) (v 4 5 6) (v 7 8 9)))
      (m4 (m (v 1 2 3 4) (v 5 6 7 8) (v 9 10 11 12) (v 13 14 15 16))))
  (s= (m:mref m2 0 0) 1 "matrix2: read row 0, column 0")
  (s= (m:mref m2 1 0) 2 "matrix2: read row 1, column 0")
  (s= (m:mref m2 0 1) 3 "matrix2: read row 0, column 1")
  (s= (m:mref m2 1 1) 4 "matrix2: read row 1, column 1")
  (s= (m:mref m3 0 0) 1 "matrix3: read row 0, column 0")
  (s= (m:mref m3 1 0) 2 "matrix3: read row 1, column 0")
  (s= (m:mref m3 2 0) 3 "matrix3: read row 2, column 0")
  (s= (m:mref m3 0 1) 4 "matrix3: read row 0, column 1")
  (s= (m:mref m3 1 1) 5 "matrix3: read row 1, column 1")
  (s= (m:mref m3 2 1) 6 "matrix3: read row 2, column 1")
  (s= (m:mref m3 0 2) 7 "matrix3: read row 0, column 2")
  (s= (m:mref m3 1 2) 8 "matrix3: read row 1, column 2")
  (s= (m:mref m3 2 2) 9 "matrix3: read row 2, column 2")
  (s= (m:mref m4 0 0) 1 "matrix4: read row 0, column 0")
  (s= (m:mref m4 1 0) 2 "matrix4: read row 1, column 0")
  (s= (m:mref m4 2 0) 3 "matrix4: read row 2, column 0")
  (s= (m:mref m4 3 0) 4 "matrix4: read row 3, column 0")
  (s= (m:mref m4 0 1) 5 "matrix4: read row 0, column 1")
  (s= (m:mref m4 1 1) 6 "matrix4: read row 1, column 1")
  (s= (m:mref m4 2 1) 7 "matrix4: read row 2, column 1")
  (s= (m:mref m4 3 1) 8 "matrix4: read row 3, column 1")
  (s= (m:mref m4 0 2) 9 "matrix4: read row 0, column 2")
  (s= (m:mref m4 1 2) 10 "matrix4: read row 1, column 2")
  (s= (m:mref m4 2 2) 11 "matrix4: read row 2, column 2")
  (s= (m:mref m4 3 2) 12 "matrix4: read row 3, column 2")
  (s= (m:mref m4 0 3) 13 "matrix4: read row 0, column 3")
  (s= (m:mref m4 1 3) 14 "matrix4: read row 1, column 3")
  (s= (m:mref m4 2 3) 15 "matrix4: read row 2, column 3")
  (s= (m:mref m4 3 3) 16 "matrix4: read row 3, column 3")
  (setf (m:mref m2 0 0) 5)
  (setf (m:mref m2 1 0) 6)
  (setf (m:mref m2 0 1) 7)
  (setf (m:mref m2 1 1) 8)
  (setf (m:mref m3 0 0) 10)
  (setf (m:mref m3 1 0) 11)
  (setf (m:mref m3 2 0) 12)
  (setf (m:mref m3 0 1) 13)
  (setf (m:mref m3 1 1) 14)
  (setf (m:mref m3 2 1) 15)
  (setf (m:mref m3 0 2) 16)
  (setf (m:mref m3 1 2) 17)
  (setf (m:mref m3 2 2) 18)
  (setf (m:mref m4 0 0) 17)
  (setf (m:mref m4 1 0) 18)
  (setf (m:mref m4 2 0) 19)
  (setf (m:mref m4 3 0) 20)
  (setf (m:mref m4 0 1) 21)
  (setf (m:mref m4 1 1) 22)
  (setf (m:mref m4 2 1) 23)
  (setf (m:mref m4 3 1) 24)
  (setf (m:mref m4 0 2) 25)
  (setf (m:mref m4 1 2) 26)
  (setf (m:mref m4 2 2) 27)
  (setf (m:mref m4 3 2) 28)
  (setf (m:mref m4 0 3) 29)
  (setf (m:mref m4 1 3) 30)
  (setf (m:mref m4 2 3) 31)
  (setf (m:mref m4 3 3) 32)
  (s= (m:mref m2 0 0) 5 "matrix2: write row 0, column 0")
  (s= (m:mref m2 1 0) 6 "matrix2: write row 1, column 0")
  (s= (m:mref m2 0 1) 7 "matrix2: write row 0, column 1")
  (s= (m:mref m2 1 1) 8 "matrix2: write row 1, column 1")
  (s= (m:mref m3 0 0) 10 "matrix3: write row 0, column 0")
  (s= (m:mref m3 1 0) 11 "matrix3: write row 1, column 0")
  (s= (m:mref m3 2 0) 12 "matrix3: write row 2, column 0")
  (s= (m:mref m3 0 1) 13 "matrix3: write row 0, column 1")
  (s= (m:mref m3 1 1) 14 "matrix3: write row 1, column 1")
  (s= (m:mref m3 2 1) 15 "matrix3: write row 2, column 1")
  (s= (m:mref m3 0 2) 16 "matrix3: write row 0, column 2")
  (s= (m:mref m3 1 2) 17 "matrix3: write row 1, column 2")
  (s= (m:mref m3 2 2) 18 "matrix3: write row 2, column 2")
  (s= (m:mref m4 0 0) 17 "matrix4: write row 0, column 0")
  (s= (m:mref m4 1 0) 18 "matrix4: write row 1, column 0")
  (s= (m:mref m4 2 0) 19 "matrix4: write row 2, column 0")
  (s= (m:mref m4 3 0) 20 "matrix4: write row 3, column 0")
  (s= (m:mref m4 0 1) 21 "matrix4: write row 0, column 1")
  (s= (m:mref m4 1 1) 22 "matrix4: write row 1, column 1")
  (s= (m:mref m4 2 1) 23 "matrix4: write row 2, column 1")
  (s= (m:mref m4 3 1) 24 "matrix4: write row 3, column 1")
  (s= (m:mref m4 0 2) 25 "matrix4: write row 0, column 2")
  (s= (m:mref m4 1 2) 26 "matrix4: write row 1, column 2")
  (s= (m:mref m4 2 2) 27 "matrix4: write row 2, column 2")
  (s= (m:mref m4 3 2) 28 "matrix4: write row 3, column 2")
  (s= (m:mref m4 0 3) 29 "matrix4: write row 0, column 3")
  (s= (m:mref m4 1 3) 30 "matrix4: write row 1, column 3")
  (s= (m:mref m4 2 3) 31 "matrix4: write row 2, column 3")
  (s= (m:mref m4 3 3) 32 "matrix4: write row 3, column 3"))

(progn
  (o= m:+m2-zero+ (m0 2) "matrix2: constant: zero")
  (o= m:+m3-zero+ (m0 3) "matrix3: constant: zero")
  (o= m:+m4-zero+ (m0 4) "matrix4: constant: zero")
  (o= m:+m2-id+ (mid 2) "matrix2: constant: identity")
  (o= m:+m3-id+ (mid 3) "matrix3: constant: identity")
  (o= m:+m4-id+ (mid 4) "matrix4: constant: identity"))

(let ((m2a (m (v 8 0) (v 8 1)))
      (m2b (m (v 8 9) (v 7 8)))
      (m2-expected1 (m (v 16 9) (v 15 9)))
      (m2-expected2 (m (v 50 42) (v 50 43)))
      (m2-out (m0 2))
      (m3a (m (v 8 0 8) (v 1 2 4) (v 3 8 9)))
      (m3b (m (v 8 9 7) (v 8 6 3) (v 0 3 6)))
      (m3-expected1 (m (v 16 9 15) (v 9 8 7) (v 3 11 15)))
      (m3-expected2 (m (v 50 42 50) (v 43 44 46) (v 45 50 51)))
      (m3-out (m0 3))
      (m4a (m (v 8 0 8 1) (v 2 4 3 8) (v 9 8 0 3) (v 1 4 1 8)))
      (m4b (m (v 8 9 7 8) (v 6 3 0 3) (v 6 8 1 6) (v 1 4 1 7)))
      (m4-expected1 (m (v 16 9 15 9) (v 8 7 3 11) (v 15 16 1 9) (v 2 8 2 15)))
      (m4-expected2 (m (v 50 42 50 43) (v 44 46 45 50) (v 51 50 42 45) (v 43 46 43 50)))
      (m4-out (m0 4)))
  (o= (m:+ m2a m2b) m2-expected1 "matrix2 + matrix2 (allocating)")
  (o= (m:+ m3a m3b) m3-expected1 "matrix3 + matrix3 (allocating)")
  (o= (m:+ m4a m4b) m4-expected1 "matrix4 + matrix4 (allocating)")
  (o= (m:+ m2a 42) m2-expected2 "matrix2 + scalar (allocating)")
  (o= (m:+ m3a 42) m3-expected2 "matrix3 + scalar (allocating)")
  (o= (m:+ m4a 42) m4-expected2 "matrix4 + scalar (allocating)")
  (m:+! m2a m2b m2-out)
  (m:+! m3a m3b m3-out)
  (m:+! m4a m4b m4-out)
  (o= m2-out m2-expected1 "matrix2 + matrix2 (in-place)")
  (o= m3-out m3-expected1 "matrix3 + matrix3 (in-place)")
  (o= m4-out m4-expected1 "matrix4 + matrix4 (in-place)")
  (m:+! m2a 42 m2-out)
  (m:+! m3a 42 m3-out)
  (m:+! m4a 42 m4-out)
  (o= m2-out m2-expected2 "matrix2 + scalar (in-place)")
  (o= m3-out m3-expected2 "matrix3 + scalar (in-place)")
  (o= m4-out m4-expected2 "matrix4 + scalar (in-place)"))

(let ((m2a (m (v 8 0) (v 8 1)))
      (m2b (m (v 8 9) (v 7 8)))
      (m2-expected1 (m (v 0 -9) (v 1 -7)))
      (m2-expected2 (m (v 7.58 -0.42) (v 7.58 0.58)))
      (m2-out (m0 2))
      (m3a (m (v 8 0 8) (v 1 2 4) (v 3 8 9)))
      (m3b (m (v 8 9 7) (v 8 6 3) (v 0 3 6)))
      (m3-expected1 (m (v 0 -9 1) (v -7 -4 1) (v 3 5 3)))
      (m3-expected2 (m (v 7.58 -0.42 7.58) (v 0.58 1.58 3.58) (v 2.58 7.58 8.58)))
      (m3-out (m0 3))
      (m4a (m (v 8 0 8 1) (v 2 4 3 8) (v 9 8 0 3) (v 1 4 1 8)))
      (m4b (m (v 8 9 7 8) (v 6 3 0 3) (v 6 8 1 6) (v 1 4 1 7)))
      (m4-expected1 (m (v 0 -9 1 -7) (v -4 1 3 5) (v 3 0 -1 -3) (v 0 0 0 1)))
      (m4-expected2 (m (v 7.58 -0.42 7.58 0.58)
                       (v 1.58 3.58 2.58 7.58)
                       (v 8.58 7.58 -0.42 2.58)
                       (v 0.58 3.58 0.58 7.58)))
      (m4-out (m0 4)))
  (o= (m:- m2a m2b) m2-expected1 "matrix2 - matrix2 (allocating)")
  (o= (m:- m3a m3b) m3-expected1 "matrix3 - matrix3 (allocating)")
  (o= (m:- m4a m4b) m4-expected1 "matrix4 - matrix4 (allocating)")
  (o= (m:- m2a 0.42) m2-expected2 "matrix2 - scalar (allocating)")
  (o= (m:- m3a 0.42) m3-expected2 "matrix3 - scalar (allocating)")
  (o= (m:- m4a 0.42) m4-expected2 "matrix4 - scalar (allocating)")
  (m:-! m2a m2b m2-out)
  (m:-! m3a m3b m3-out)
  (m:-! m4a m4b m4-out)
  (o= m2-out m2-expected1 "matrix2 - matrix2 (in-place)")
  (o= m3-out m3-expected1 "matrix3 - matrix3 (in-place)")
  (o= m4-out m4-expected1 "matrix4 - matrix4 (in-place)")
  (m:-! m2a 0.42 m2-out)
  (m:-! m3a 0.42 m3-out)
  (m:-! m4a 0.42 m4-out)
  (o= m2-out m2-expected2 "matrix2 - scalar (in-place)")
  (o= m3-out m3-expected2 "matrix3 - scalar (in-place)")
  (o= m4-out m4-expected2 "matrix4 - scalar (in-place)"))

(let ((m2 (m (v 1 2) (v 3 4)))
      (m2-expected (m (v 7 10) (v 15 22)))
      (v2-expected (v -1.2320509 1.8660254))
      (m2-out (m0 2))
      (v2-out (v0 2))
      (m3 (m (v 1 2 3) (v 4 5 6) (v 7 8 9)))
      (m3-expected (m (v 30 36 42) (v 66 81 96) (v 102 126 150)))
      (v3-expected (v -1.2320509 1.8660254 3))
      (m3-out (m0 3))
      (v3-out (v0 3))
      (m4 (m (v 1 2 3 4) (v 5 6 7 8) (v 9 10 11 12) (v 13 14 15 16)))
      (m4-expected (m (v 90 100 110 120)
                      (v 202 228 254 280)
                      (v 314 356 398 440)
                      (v 426 484 542 600)))
      (v4-expected (v 1 -1.5980763 3.232051 4))
      (m4-out (m0 4))
      (v4-out (v0 4)))
  (o= (m:* m2 m2) m2-expected "matrix2 * matrix2: (allocating)")
  (o= (m:* m3 m3) m3-expected "matrix3 * matrix3: (allocating)")
  (o= (m:* m4 m4) m4-expected "matrix4 * matrix4: (allocating)")
  (o= (m:* (m:rotate (mid 2) (/ pi 3)) (v 1 2)) v2-expected "matrix2 * vector2: (allocating)")
  (o= (m:* (m:rotate (mid 3) (/ pi 3)) (v 1 2 3)) v3-expected "matrix3 * vector3: (allocating)")
  (o= (m:* (m:rotate (mid 4) (v (/ pi 3) 0 0)) (v 1 2 3 4))
      v4-expected
      "matrix4 * vector4: (allocating)")
  (m:*! m2 m2 m2-out)
  (m:*! m3 m3 m3-out)
  (m:*! m4 m4 m4-out)
  (o= m2-out m2-expected "matrix2 * matrix2: (in-place)")
  (o= m3-out m3-expected "matrix3 * matrix2: (in-place)")
  (o= m4-out m4-expected "matrix4 * matrix2: (in-place)")
  (m:*! (m:rotate (mid 2) (/ pi 3)) (v 1 2) v2-out)
  (m:*! (m:rotate (mid 3) (/ pi 3)) (v 1 2 3) v3-out)
  (m:*! (m:rotate (mid 4) (v (/ pi 3) 0 0)) (v 1 2 3 4) v4-out)
  (o= v2-out v2-expected "matrix2 * vector2: (in-place)")
  (o= v3-out v3-expected "matrix3 * vector3: (in-place)")
  (o= v4-out v4-expected "matrix4 * vector4: (in-place)"))

(let ((m2 (m (v 1 2) (v 3 4)))
      (v2-expected (v 2 3))
      (v2-out (v0 2))
      (m3 (m (v 1 2 3) (v 4 5 6) (v 7 8 9)))
      (v3-expected (v 3 5 7))
      (v3-out (v0 3))
      (m4 (m (v 1 2 3 4) (v 5 6 7 8) (v 9 10 11 12) (v 13 14 15 16)))
      (v4-expected (v 4 7 10 13))
      (v4-out (v0 4)))
  (o= (m:anti-diagonal m2) v2-expected "matrix2: anti-diagonal (allocating)")
  (o= (m:anti-diagonal m3) v3-expected "matrix3: anti-diagonal (allocating)")
  (o= (m:anti-diagonal m4) v4-expected "matrix4: anti-diagonal (allocating)")
  (m:anti-diagonal! m2 v2-out)
  (m:anti-diagonal! m3 v3-out)
  (m:anti-diagonal! m4 v4-out)
  (o= v2-out v2-expected "matrix2: anti-diagonal (in-place)")
  (o= v3-out v3-expected "matrix3: anti-diagonal (in-place)")
  (o= v4-out v4-expected "matrix4: anti-diagonal (in-place)"))

(let ((m2 (m (v -2 2) (v 0 1)))
      (m2-expected (m (v -1 1) (v 0 1)))
      (m2-out (m0 2))
      (m3 (m (v -1.5 0.3 2.4) (v 1.2 0.2 3.2) (v 2.3 -0.3 -2.3)))
      (m3-expected (m (v -1 0.3 1) (v 1 0.2 1) (v 1 -0.3 -1)))
      (m3-out (m0 3))
      (m4 (m (v -1.5 0.3 2.4 1.8) (v -1.1 0 2.1 1.1) (v -0.2 2.3 1.7 -1.4) (v 1.2 0.3 0.4 2.2)))
      (m4-expected (m (v -1 0.3 1 1) (v -1 0 1 1) (v -0.2 1 1 -1) (v 1 0.3 0.4 1)))
      (m4-out (m0 4)))
  (o= (m:clamp m2 -1 1) m2-expected "matrix2: clamp (scalar bounds, allocating)")
  (o= (m:clamp m3 -1 1) m3-expected "matrix3: clamp (scalar bounds, allocating)")
  (o= (m:clamp m4 -1 1) m4-expected "matrix4: clamp (scalar bounds, allocating)")
  (o= (m:clamp m2 (m (v -1 -1) (v -1 -1)) (m (v 1 1) (v 1 1)))
      m2-expected
      "matrix2: clamp (matrix bounds, allocating)")
  (o= (m:clamp m3
               (m (v -1 -1 -1) (v -1 -1 -1) (v -1 -1 -1))
               (m (v 1 1 1) (v 1 1 1) (v 1 1 1))
               )
      m3-expected
      "matrix3: clamp (matrix bounds, allocating)")
  (o= (m:clamp m4
               (m (v -1 -1 -1 -1) (v -1 -1 -1 -1) (v -1 -1 -1 -1) (v -1 -1 -1 -1))
               (m (v 1 1 1 1) (v 1 1 1 1) (v 1 1 1 1) (v 1 1 1 1)))
      m4-expected
      "matrix4: clamp (matrix bounds, allocating)")
  (m:clamp! m2 -1 1 m2-out)
  (m:clamp! m3 -1 1 m3-out)
  (m:clamp! m4 -1 1 m4-out)
  (o= m2-out m2-expected "matrix2: clamp (scalar bounds, in-place)")
  (o= m3-out m3-expected "matrix3: clamp (scalar bounds, in-place)")
  (o= m4-out m4-expected "matrix4: clamp (scalar bounds, in-place)")
  (m:clamp! m2 (m (v -1 -1) (v -1 -1)) (m (v 1 1) (v 1 1)) m2-out)
  (m:clamp! m3
            (m (v -1 -1 -1) (v -1 -1 -1) (v -1 -1 -1))
            (m (v 1 1 1) (v 1 1 1) (v 1 1 1))
            m3-out)
  (m:clamp! m4
            (m (v -1 -1 -1 -1) (v -1 -1 -1 -1) (v -1 -1 -1 -1) (v -1 -1 -1 -1))
            (m (v 1 1 1 1) (v 1 1 1 1) (v 1 1 1 1) (v 1 1 1 1))
            m4-out)
  (o= m2-out m2-expected "matrix2: clamp (matrix bounds, in-place)")
  (o= m3-out m3-expected "matrix3: clamp (matrix bounds, in-place)")
  (o= m4-out m4-expected "matrix4: clamp (matrix bounds, in-place)"))

(let ((m2 (mid 2))
      (m2-out (m0 2))
      (m3 (mid 3))
      (m3-out (m0 3))
      (m4 (mid 4))
      (m4-out (m0 4)))
  (ok (not (eq (m:copy m2) m2)) "matrix2: copy (allocating)")
  (ok (not (eq (m:copy m3) m3)) "matrix3: copy (allocating)")
  (ok (not (eq (m:copy m4) m4)) "matrix4: copy (allocating)")
  (m:copy! m2 m2-out)
  (m:copy! m3 m3-out)
  (m:copy! m4 m4-out)
  (o= m2 m2-out "matrix2: copy (in-place)")
  (o= m3 m3-out "matrix3: copy (in-place)")
  (o= m4 m4-out "matrix4: copy (in-place)"))

(progn
  (o= (m:default (m0 2)) (mid 2) "matrix2: default")
  (o= (m:default (m0 3)) (mid 3) "matrix3: default")
  (o= (m:default (m0 4)) (mid 4) "matrix4: default"))

(let ((m4a (m (v 1 5 9 13) (v 2 6 10 14) (v 3 7 11 15) (v 4 8 12 16)))
      (m4b (mid 4))
      (m4c (m:rotate (mid 4) (v (/ pi 3) 0 0)))
      (m4d (m (v 1 0 0 0) (v 0 0 1 0) (v 0 1 0 0) (v 0 0 0 1))))
  (s= (m:determinant m4a) 0 "matrix4: determinant (test 1)")
  (s= (m:determinant m4b) 1 "matrix4: determinant (test 2)")
  (s= (m:determinant m4c) 1 "matrix4: determinant (test 3)")
  (s= (m:determinant m4d) -1 "matrix4: determinant (test 4)"))

(let ((m2 (m (v 1 0) (v 0 4)))
      (m3 (m (v 1 0 0) (v 0 5 0) (v 0 0 9)))
      (m4 (m (v 1 0 0 0) (v 0 6 0 0) (v 0 0 11 0) (v 0 0 0 16))))
  (ok (m:diagonal? m2) "matrix2: diagonal?")
  (ok (m:diagonal? m3) "matrix3: diagonal?")
  (ok (m:diagonal? m4) "matrix4: diagonal?"))

(let ((m2 (m (v 1 2) (v 3 4)))
      (m3 (m (v 1 2 3) (v 4 5 6) (v 7 8 9)))
      (v2-expected1 (v 1 2))
      (v2-expected2 (v 3 4))
      (v2-expected3 (v 4 5))
      (v2-out (v0 2))
      (m4 (m (v 1 2 3 4) (v 5 6 7 8) (v 9 10 11 12) (v 13 14 15 16)))
      (v3-expected1 (v 1 2 3))
      (v3-expected2 (v 5 6 7))
      (v3-expected3 (v 9 10 11))
      (v3-out (v0 3)))
  (o= (m:get-axis m2 :x) v2-expected1 "matrix2: get-axis: x (allocating)")
  (o= (m:get-axis m2 :y) v2-expected2 "matrix2: get-axis: y (allocating)")
  (o= (m:get-axis m3 :x) v2-expected1 "matrix3: get-axis: x (allocating)")
  (o= (m:get-axis m3 :y) v2-expected3 "matrix3: get-axis: y (allocating)")
  (o= (m:get-axis m4 :x) v3-expected1 "matrix4: get-axis: x (allocating)")
  (o= (m:get-axis m4 :y) v3-expected2 "matrix4: get-axis: y (allocating)")
  (o= (m:get-axis m4 :z) v3-expected3 "matrix4: get-axis: z (allocating)")
  (m:get-axis! m2 :x v2-out)
  (o= v2-out v2-expected1 "matrix2: get-axis: x (in-place)")
  (m:get-axis! m2 :y v2-out)
  (o= v2-out v2-expected2 "matrix2: get-axis: y (in-place)")
  (m:get-axis! m3 :x v2-out)
  (o= v2-out v2-expected1 "matrix3: get-axis: x (in-place)")
  (m:get-axis! m3 :y v2-out)
  (o= v2-out v2-expected3 "matrix3: get-axis: y (in-place)")
  (m:get-axis! m4 :x v3-out)
  (o= v3-out v3-expected1 "matrix4: get-axis: x (in-place)")
  (m:get-axis! m4 :y v3-out)
  (o= v3-out v3-expected2 "matrix4: get-axis: y (in-place)")
  (m:get-axis! m4 :z v3-out)
  (o= v3-out v3-expected3 "matrix4: get-axis: z (in-place)"))

(let ((m2 (m (v 1 2) (v 3 4)))
      (v2-expected1 (v 1 2))
      (v2-expected2 (v 3 4))
      (v2-out (v0 2))
      (m3 (m (v 1 2 3) (v 4 5 6) (v 7 8 9)))
      (v3-expected1 (v 1 2 3))
      (v3-expected2 (v 4 5 6))
      (v3-expected3 (v 7 8 9))
      (v3-out (v0 3))
      (m4 (m (v 1 2 3 4) (v 5 6 7 8) (v 9 10 11 12) (v 13 14 15 16)))
      (v4-expected1 (v 1 2 3 4))
      (v4-expected2 (v 5 6 7 8))
      (v4-expected3 (v 9 10 11 12))
      (v4-expected4 (v 13 14 15 16))
      (v4-out (v0 4)))
  (o= (m:get-column m2 0) v2-expected1 "matrix2: get-column: 0 (allocating)")
  (o= (m:get-column m2 1) v2-expected2 "matrix2: get-column: 1 (allocating)")
  (o= (m:get-column m3 0) v3-expected1 "matrix3: get-column: 0 (allocating)")
  (o= (m:get-column m3 1) v3-expected2 "matrix3: get-column: 1 (allocating)")
  (o= (m:get-column m3 2) v3-expected3 "matrix3: get-column: 2 (allocating)")
  (o= (m:get-column m4 0) v4-expected1 "matrix4: get-column: 0 (allocating)")
  (o= (m:get-column m4 1) v4-expected2 "matrix4: get-column: 1 (allocating)")
  (o= (m:get-column m4 2) v4-expected3 "matrix4: get-column: 2 (allocating)")
  (o= (m:get-column m4 3) v4-expected4 "matrix4: get-column: 3 (allocating)")
  (m:get-column! m2 0 v2-out)
  (o= v2-out v2-expected1 "matrix2: get-column: 0 (in-place)")
  (m:get-column! m2 1 v2-out)
  (o= v2-out v2-expected2 "matrix2: get-column: 1 (in-place)")
  (m:get-column! m3 0 v3-out)
  (o= v3-out v3-expected1 "matrix3: get-column: 0 (in-place)")
  (m:get-column! m3 1 v3-out)
  (o= v3-out v3-expected2 "matrix3: get-column: 1 (in-place)")
  (m:get-column! m3 2 v3-out)
  (o= v3-out v3-expected3 "matrix3: get-column: 2 (in-place)")
  (m:get-column! m4 0 v4-out)
  (o= v4-out v4-expected1 "matrix4: get-column: 0 (in-place)")
  (m:get-column! m4 1 v4-out)
  (o= v4-out v4-expected2 "matrix4: get-column: 1 (in-place)")
  (m:get-column! m4 2 v4-out)
  (o= v4-out v4-expected3 "matrix4: get-column: 2 (in-place)")
  (m:get-column! m4 3 v4-out)
  (o= v4-out v4-expected4 "matrix4: get-column: 3 (in-place)"))

(let ((m3 (m (v 1 2 3) (v 4 5 6) (v 7 8 9)))
      (m2-expected (m (v 1 2) (v 4 5)))
      (m2-out (m0 2))
      (m4 (m (v 1 2 3 4) (v 5 6 7 8) (v 9 10 11 12) (v 13 14 15 16)))
      (m3-expected (m (v 1 2 3) (v 5 6 7) (v 9 10 11)))
      (m3-out (m0 3)))
  (o= (m:get-rotation m3) m2-expected "matrix3: get-rotation (allocating)")
  (o= (m:get-rotation m4) m3-expected "matrix4: get-rotation (allocating)")
  (m:get-rotation! m3 m2-out)
  (o= m2-out m2-expected "matrix3: get-rotation (in-place)")
  (m:get-rotation! m4 m3-out)
  (o= m3-out m3-expected "matrix4: get-rotation (in-place)"))

(let ((m2 (m (v 1 2) (v 3 4)))
      (v2-expected1 (v 1 3))
      (v2-expected2 (v 2 4))
      (v2-out (v0 2))
      (m3 (m (v 1 2 3) (v 4 5 6) (v 7 8 9)))
      (v3-expected1 (v 1 4 7))
      (v3-expected2 (v 2 5 8))
      (v3-expected3 (v 3 6 9))
      (v3-out (v0 3))
      (m4 (m (v 1 2 3 4) (v 5 6 7 8) (v 9 10 11 12) (v 13 14 15 16)))
      (v4-expected1 (v 1 5 9 13))
      (v4-expected2 (v 2 6 10 14))
      (v4-expected3 (v 3 7 11 15))
      (v4-expected4 (v 4 8 12 16))
      (v4-out (v0 4)))
  (o= (m:get-row m2 0) v2-expected1 "matrix2: get-row: 0 (allocating)")
  (o= (m:get-row m2 1) v2-expected2 "matrix2: get-row: 1 (allocating)")
  (o= (m:get-row m3 0) v3-expected1 "matrix3: get-row: 0 (allocating)")
  (o= (m:get-row m3 1) v3-expected2 "matrix3: get-row: 1 (allocating)")
  (o= (m:get-row m3 2) v3-expected3 "matrix3: get-row: 2 (allocating)")
  (o= (m:get-row m4 0) v4-expected1 "matrix4: get-row: 0 (allocating)")
  (o= (m:get-row m4 1) v4-expected2 "matrix4: get-row: 1 (allocating)")
  (o= (m:get-row m4 2) v4-expected3 "matrix4: get-row: 2 (allocating)")
  (o= (m:get-row m4 3) v4-expected4 "matrix4: get-row: 3 (allocating)")
  (m:get-row! m2 0 v2-out)
  (o= v2-out v2-expected1 "matrix2: get-row: 0 (in-place)")
  (m:get-row! m2 1 v2-out)
  (o= v2-out v2-expected2 "matrix2: get-row: 1 (in-place)")
  (m:get-row! m3 0 v3-out)
  (o= v3-out v3-expected1 "matrix3: get-row: 0 (in-place)")
  (m:get-row! m3 1 v3-out)
  (o= v3-out v3-expected2 "matrix3: get-row: 1 (in-place)")
  (m:get-row! m3 2 v3-out)
  (o= v3-out v3-expected3 "matrix3: get-row: 2 (in-place)")
  (m:get-row! m4 0 v4-out)
  (o= v4-out v4-expected1 "matrix4: get-row: 0 (in-place)")
  (m:get-row! m4 1 v4-out)
  (o= v4-out v4-expected2 "matrix4: get-row: 1 (in-place)")
  (m:get-row! m4 2 v4-out)
  (o= v4-out v4-expected3 "matrix4: get-row: 2 (in-place)")
  (m:get-row! m4 3 v4-out)
  (o= v4-out v4-expected4 "matrix4: get-row: 3 (in-place)"))

(let ((m2 (m (v 1 2) (v 3 4)))
      (v2-expected (v 2.236068 5))
      (v2-out (v0 2))
      (m4 (m (v 1 2 3 4) (v 5 6 7 8) (v 9 10 11 12) (v 13 14 15 16)))
      (v3-expected (v 3.74165750 10.488089 17.378147))
      (v3-out (v0 3)))
  (o= (m:get-scale m2) v2-expected "matrix2: get-scale (allocating)")
  (o= (m:get-scale m4) v3-expected "matrix4: get-scale (allocating)")
  (m:get-scale! m2 v2-out)
  (o= v2-out v2-expected "matrix2: get-scale (in-place)")
  (m:get-scale! m4 v3-out)
  (o= v3-out v3-expected "matrix4: get-scale (in-place)"))

(let ((m3 (m (v 1 2 3) (v 4 5 6) (v 7 8 9)))
      (v2-expected (v 7 8))
      (v2-out (v0 2))
      (m4 (m (v 1 2 3 4) (v 5 6 7 8) (v 9 10 11 12) (v 13 14 15 16)))
      (v3-expected (v 13 14 15))
      (v3-out (v0 3)))
  (o= (m:get-translation m3) v2-expected "matrix2: get-translation (allocating)")
  (o= (m:get-translation m4) v3-expected "matrix4: get-translation (allocating)")
  (m:get-translation! m3 v2-out)
  (o= v2-out v2-expected "matrix3: get-translation (in-place)")
  (m:get-translation! m4 v3-out)
  (o= v3-out v3-expected "matrix4: get-translation (in-place)"))

(let ((m2 (mid 2))
      (m2-expected (m (v 1 0) (v 0 1)))
      (m2-out (m0 2))
      (m3 (mid 3))
      (m3-expected (m (v 1 0 0) (v 0 1 0) (v 0 0 1)))
      (m3-out (m0 3))
      (m4 (mid 4))
      (m4-expected (m (v 1 0 0 0) (v 0 1 0 0) (v 0 0 1 0) (v 0 0 0 1)))
      (m4-out (m0 4)))
  (o= m2 m2-expected "matrix2: id (allocating)")
  (o= m3 m3-expected "matrix3: id (allocating)")
  (o= m4 m4-expected "matrix4: id (allocating)")
  (m:id! m2-out)
  (m:id! m3-out)
  (m:id! m4-out)
  (o= m2-out m2-expected "matrix2: id (in-place)")
  (o= m3-out m3-expected "matrix3: id (in-place)")
  (o= m4-out m4-expected "matrix4: id (in-place)")
  (ok (m:id? m2) "matrix2: id?")
  (ok (m:id? m3) "matrix3: id?")
  (ok (m:id? m4) "matrix4: id?"))

(let ((m4 (m:rotate (mid 4) (v (/ pi 3) 0 0)))
      (m4-expected (m:rotate (mid 4) (v (/ pi -3) 0 0)))
      (m4-out (m0 4)))
  (o= (m:invert m4) m4-expected "matrix4: invert (allocating)")
  (m:invert! m4 m4-out)
  (o= m4-out m4-expected "matrix4: invert (in-place)"))

(let ((m4-expected (m (v -0.436492 0.0480191 -0.8984258 0)
                      (v 0 0.9985747 0.0533718 0)
                      (v 0.8997081 0.0232964 -0.4358699 0)
                      (v -0.013362 -2.0568167 1.0096171 1)))
      (m4-out (m0 4)))
  (o= (m:look-at (v 1 2 0.5) (v 21.2 0.8 10.3) (v 0 1 0))
      m4-expected
      "matrix4: look-at (allocating)")
  (m:look-at! (v 1 2 0.5) (v 21.2 0.8 10.3) (v 0 1 0) m4-out)
  (o= m4-out m4-expected "matrix4: look-at (in-place)"))

(let ((m2 (m (v 1 2) (v 3 4)))
      (v2-expected (v 1 4))
      (v2-out (v0 2))
      (m3 (m (v 1 2 3) (v 4 5 6) (v 7 8 9)))
      (v3-expected (v 1 5 9))
      (v3-out (v0 3))
      (m4 (m (v 1 2 3 4) (v 5 6 7 8) (v 9 10 11 12) (v 13 14 15 16)))
      (v4-expected (v 1 6 11 16))
      (v4-out (v0 4)))
  (o= (m:main-diagonal m2) v2-expected "matrix2: main-diagonal (allocating)")
  (o= (m:main-diagonal m3) v3-expected "matrix3: main-diagonal (allocating)")
  (o= (m:main-diagonal m4) v4-expected "matrix4: main-diagonal (allocating)")
  (m:main-diagonal! m2 v2-out)
  (m:main-diagonal! m3 v3-out)
  (m:main-diagonal! m4 v4-out)
  (o= v2-out v2-expected "matrix2: main-diagonal (in-place)")
  (o= v3-out v3-expected "matrix3: main-diagonal (in-place)")
  (o= v4-out v4-expected "matrix4: main-diagonal (in-place)"))

(let ((m2 (m (v 2 0) (v 0 3)))
      (m2-out (m0 2))
      (m3 (m (v 2 0 0) (v 0 3 0) (v 0 0 1)))
      (m3-out (m0 3))
      (m4 (m (v 2 0 0 0) (v 0 3 0 0) (v 0 0 3 0) (v 0 0 0 1)))
      (m4-out (m0 4)))
  (o= (m:normalize-rotation m2) (mid 2) "matrix2: normalize-rotation (allocating)")
  (o= (m:normalize-rotation m3) (mid 3) "matrix3: normalize-rotation (allocating)")
  (o= (m:normalize-rotation m4) (mid 4) "matrix4: normalize-rotation (allocating)")
  (m:normalize-rotation! m2 m2-out)
  (m:normalize-rotation! m3 m3-out)
  (m:normalize-rotation! m4 m4-out)
  (o= m2-out (mid 2) "matrix2: normalize-rotation (in-place)")
  (o= m3-out (mid 3) "matrix3: normalize-rotation (in-place)")
  (o= m4-out (mid 4) "matrix4: normalize-rotation (in-place)"))

(let ((m4-expected (m (v 0.05 0 0 0) (v 0 0.1 0 0) (v 0 0 -0.002 0) (v 0 0 -1 1)))
      (m4-out (m0 4)))
  (o= (m:ortho -20 20 -10 10 0 1000) m4-expected "matrix4: ortho (allocating)")
  (m:ortho! -20 20 -10 10 0 1000 m4-out)
  (o= m4-out m4-expected "matrix4: ortho (in-place)"))

(progn
  (ok (m:orthogonal? (m:rotate (mid 2) pi)) "matrix2: orthogonal? (test 1)")
  (ok (m:orthogonal? (m:rotate (mid 2) (/ pi 2))) "matrix2: orthogonal? (test 2)")
  (ok (m:orthogonal? (m:rotate (mid 2) (/ pi 3))) "matrix2: orthogonal? (test 3)")
  (ok (m:orthogonal? (m:rotate (mid 3) pi)) "matrix3: orthogonal? (test 1)")
  (ok (m:orthogonal? (m:rotate (mid 3) (/ pi 2))) "matrix3: orthogonal? (test 2)")
  (ok (m:orthogonal? (m:rotate (mid 3) (/ pi 3))) "matrix3: orthogonal? (test 3)")
  (ok (m:orthogonal? (m:rotate (mid 4) (v pi (/ pi 2) 0))) "matrix4: orthogonal? (test 1)")
  (ok (m:orthogonal? (m:rotate (mid 4) (v (/ pi 2) 0 0))) "matrix4: orthogonal? (test 2)")
  (ok (m:orthogonal? (m:rotate (mid 4) (v pi (/ pi 2) (/ pi 3)))) "matrix4: orthogonal? (test 3)"))

(let ((m4 (m (v 0 0 1 0)
             (v 1 0 0 0)
             (v -0.12988785 0.3997815 0.5468181 0)
             (v 1.0139829 -0.027215311 0.18567966 0)))
      (m4-expected (m (v 0 0 1 0) (v 1 0 0 0) (v 0 1 0 0) (v 1.0139829 -0.027215311 0.18567966 0)))
      (m4-out (m0 4)))
  (o= (m:orthonormalize m4) m4-expected "matrix4: orthonormalize (allocating)")
  (m:orthonormalize! m4 m4-out)
  (o= m4-out m4-expected "matrix4: orthonormalize (in-place)"))

(let ((m4-expected (m (v 0.9742786 0 0 0)
                      (v 0 1.7320509 0 0)
                      (v 0 0 -1.002002 -1)
                      (v 0 0 -2.002002 0)))
      (m4-out (m0 4)))
  (o= (m:perspective (/ pi 3) (/ 16 9) 1 1000) m4-expected "matrix4: perspective (allocating)")
  (m:perspective! (/ pi 3) (/ 16 9) 1 1000 m4-out)
  (o= m4-out m4-expected "matrix4: perspective (in-place)"))

(let ((m2 (m0 2))
      (m3 (m0 3))
      (m4 (m0 4)))
  (m:random! m2)
  (m:random! m3)
  (m:random! m4)
  (o/= m2 (m:mat/random 2) "matrix2: random (in-place)")
  (o/= m3 (m:mat/random 3) "matrix3: random (in-place)")
  (o/= m4 (m:mat/random 4) "matrix4: random (in-place)"))

(let ((m2-expected (m (v 0.5 0.86602545) (v -0.86602545 0.5)))
      (m2-out (m0 2))
      (m3-expected (m (v 0.5 0.86602545 0) (v -0.86602545 0.5 0) (v 0 0 1)))
      (m3-out (m0 3))
      (m4-expected1 (m (v 1 0 0 0) (v 0 0.5 0.86602545 0) (v 0 -0.86602545 0.5 0) (v 0 0 0 1)))
      (m4-expected2 (m (v 0.5 0 -0.86602545 0) (v 0 1 0 0) (v 0.86602545 0 0.5 0) (v 0 0 0 1)))
      (m4-expected3 (m (v 0.5 0.86602545 0 0) (v -0.86602545 0.5 0 0) (v 0 0 1 0) (v 0 0 0 1)))
      (m4-out (m0 4)))
  (o= (m:rotate (mid 2) (/ pi 3)) m2-expected "matrix2: rotate (allocating)")
  (o= (m:rotate (mid 3) (/ pi 3)) m3-expected "matrix3: rotate (allocating)")
  (o= (m:rotate (mid 4) (v (/ pi 3) 0 0)) m4-expected1 "matrix4: rotate (allocating, test 1)")
  (o= (m:rotate (mid 4) (v 0 (/ pi 3) 0)) m4-expected2 "matrix4: rotate (allocating, test 2)")
  (o= (m:rotate (mid 4) (v 0 0 (/ pi 3))) m4-expected3 "matrix4: rotate (allocating, test 3)")
  (m:rotate! (mid 2) (/ pi 3) m2-out)
  (o= m2-out m2-expected "matrix2: rotate (in-place)")
  (m:rotate! (mid 3) (/ pi 3) m3-out)
  (o= m3-out m3-expected "matrix3: rotate (in-place)")
  (m:rotate! (mid 4) (v (/ pi 3) 0 0) m4-out)
  (o= m4-out m4-expected1 "matrix4: rotate (in-place, test 1)")
  (m:rotate! (mid 4) (v 0 (/ pi 3) 0) m4-out)
  (o= m4-out m4-expected2 "matrix4: rotate (in-place, test 2)")
  (m:rotate! (mid 4) (v 0 0 (/ pi 3)) m4-out)
  (o= m4-out m4-expected3 "matrix4: rotate (in-place, test 3)"))

(let ((m2-expected (m (v 0.7071068 0.7071068) (v -0.7071068 0.7071068)))
      (m2-out (m0 2))
      (m3-expected1 (m (v 1 0 0) (v 0 0.7071068 0.7071068) (v 0 -0.7071068 0.7071068)))
      (m3-expected2 (m (v 0.7071068 0 -0.7071068) (v 0 1 0) (v 0.7071068 0 0.7071068)))
      (m3-expected3 (m (v 0.7071068 0.7071068 0) (v -0.7071068 0.7071068 0) (v 0 0 1)))
      (m3-out (m0 3))
      (m4-expected1 (m (v 1 0 0 0)
                       (v 0 0.7071068 0.7071068 0)
                       (v 0 -0.7071068 0.7071068 0)
                       (v 0 0 0 1)))
      (m4-expected2 (m (v 0.7071068 0 -0.7071068 0)
                       (v 0 1 0 0)
                       (v 0.7071068 0 0.7071068 0)
                       (v 0 0 0 1)))
      (m4-expected3 (m (v 0.7071068 0.7071068 0 0)
                       (v -0.7071068 0.7071068 0 0)
                       (v 0 0 1 0)
                       (v 0 0 0 1)))
      (m4-out (m0 4)))
  (m:rotation/z! m2-out (/ pi 4))
  (o= m2-out m2-expected "matrix2: rotation/z (in-place)")
  (m:rotation/x! m3-out (/ pi 4))
  (o= m3-out m3-expected1 "matrix3: rotation/x (in-place)")
  (m:rotation/y! m3-out (/ pi 4))
  (o= m3-out m3-expected2 "matrix3: rotation/y (in-place)")
  (m:rotation/z! m3-out (/ pi 4))
  (o= m3-out m3-expected3 "matrix3: rotation/z (in-place)")
  (m:rotation/x! m4-out (/ pi 4))
  (o= m4-out m4-expected1 "matrix4: rotation/x (in-place)")
  (m:rotation/y! m4-out (/ pi 4))
  (o= m4-out m4-expected2 "matrix4: rotation/y (in-place)")
  (m:rotation/z! m4-out (/ pi 4))
  (o= m4-out m4-expected3 "matrix4: rotation/z (in-place)"))

(let ((m2 (m (v 10 0) (v 0 20)))
      (m2-expected (m (v 20 0) (v 0 60)))
      (m2-out (m0 2))
      (m3 (m (v 10 0 0) (v 0 20 0) (v 0 0 2)))
      (m3-expected (m (v 20 0 0) (v 0 60 0) (v 0 0 2)))
      (m3-out (m0 3))
      (m4 (m (v 10 0 0 0) (v 0 20 0 0) (v 0 0 30 0) (v 0 0 0 2)))
      (m4-expected (m (v 10 0 0 0) (v 0 40 0 0) (v 0 0 90 0) (v 0 0 0 2)))
      (m4-out (m0 4)))
  (o= (m:scale m2 (v 2 3)) m2-expected "matrix2: scale (allocating)")
  (o= (m:scale m3 (v 2 3)) m3-expected "matrix3: scale (allocating)")
  (o= (m:scale m4 (v 1 2 3)) m4-expected "matrix4: scale (allocating)")
  (m:scale! m2 (v 2 3) m2-out)
  (m:scale! m3 (v 2 3) m3-out)
  (m:scale! m4 (v 1 2 3) m4-out)
  (o= m2-out m2-expected "matrix2: scale (in-place)")
  (o= m3-out m3-expected "matrix3: scale (in-place)")
  (o= m4-out m4-expected "matrix4: scale (in-place)"))

(let ((m2-expected1 (m (v 10 20) (v 0 1)))
      (m2-expected2 (m (v 1 0) (v 10 20)))
      (m2-out (mid 2))
      (m3-expected1 (m (v 10 20 0) (v 0 1 0) (v 0 0 1)))
      (m3-expected2 (m (v 1 0 0) (v 10 20 0) (v 0 0 1)))
      (m3-out (mid 3))
      (m4-expected1 (m (v 10 20 30 0) (v 0 1 0 0) (v 0 0 1 0) (v 0 0 0 1)))
      (m4-expected2 (m (v 1 0 0 0) (v 10 20 30 0) (v 0 0 1 0) (v 0 0 0 1)))
      (m4-expected3 (m (v 1 0 0 0) (v 0 1 0 0) (v 10 20 30 0) (v 0 0 0 1)))
      (m4-out (mid 4)))
  (o= (m:set-axis (mid 2) (v 10 20) :x) m2-expected1 "matrix2: set-axis: x (allocating)")
  (o= (m:set-axis (mid 2) (v 10 20) :y) m2-expected2 "matrix2: set-axis: y (allocating)")
  (o= (m:set-axis (mid 3) (v 10 20) :x) m3-expected1 "matrix3: set-axis: x (allocating)")
  (o= (m:set-axis (mid 3) (v 10 20) :y) m3-expected2 "matrix3: set-axis: y (allocating)")
  (o= (m:set-axis (mid 4) (v 10 20 30) :x) m4-expected1 "matrix4: set-axis: x (allocating)")
  (o= (m:set-axis (mid 4) (v 10 20 30) :y) m4-expected2 "matrix4: set-axis: y (allocating)")
  (o= (m:set-axis (mid 4) (v 10 20 30) :z) m4-expected3 "matrix4: set-axis: z (allocating)")
  (m:set-axis! (mid 2) (v 10 20) :x m2-out)
  (o= m2-out m2-expected1 "matrix2: set-axis: x (in-place)")
  (m:set-axis! (mid 2) (v 10 20) :y m2-out)
  (o= m2-out m2-expected2 "matrix2: set-axis: y (in-place)")
  (m:set-axis! (mid 3) (v 10 20) :x m3-out)
  (o= m3-out m3-expected1 "matrix3: set-axis: x (in-place)")
  (m:set-axis! (mid 3) (v 10 20) :y m3-out)
  (o= m3-out m3-expected2 "matrix3: set-axis: y (in-place)")
  (m:set-axis! (mid 4) (v 10 20 30) :x m4-out)
  (o= m4-out m4-expected1 "matrix4: set-axis: x (in-place)")
  (m:set-axis! (mid 4) (v 10 20 30) :y m4-out)
  (o= m4-out m4-expected2 "matrix4: set-axis: y (in-place)")
  (m:set-axis! (mid 4) (v 10 20 30) :z m4-out)
  (o= m4-out m4-expected3 "matrix4: set-axis: z (in-place)"))

(let ((m2-expected1 (m (v 10 20) (v 0 1)))
      (m2-expected2 (m (v 1 0) (v 10 20)))
      (m2-out (mid 2))
      (m3-expected1 (m (v 10 20 30) (v 0 1 0) (v 0 0 1)))
      (m3-expected2 (m (v 1 0 0) (v 10 20 30) (v 0 0 1)))
      (m3-expected3 (m (v 1 0 0) (v 0 1 0) (v 10 20 30)))
      (m3-out (mid 3))
      (m4-expected1 (m (v 10 20 30 40) (v 0 1 0 0) (v 0 0 1 0) (v 0 0 0 1)))
      (m4-expected2 (m (v 1 0 0 0) (v 10 20 30 40) (v 0 0 1 0) (v 0 0 0 1)))
      (m4-expected3 (m (v 1 0 0 0) (v 0 1 0 0) (v 10 20 30 40) (v 0 0 0 1)))
      (m4-expected4 (m (v 1 0 0 0) (v 0 1 0 0) (v 0 0 1 0) (v 10 20 30 40)))
      (m4-out (mid 4)))
  (o= (m:set-column (mid 2) (v 10 20) 0) m2-expected1 "matrix2: set-column: 0 (allocating)")
  (o= (m:set-column (mid 2) (v 10 20) 1) m2-expected2 "matrix2: set-column: 1 (allocating)")
  (o= (m:set-column (mid 3) (v 10 20 30) 0) m3-expected1 "matrix3: set-column: 0 (allocating)")
  (o= (m:set-column (mid 3) (v 10 20 30) 1) m3-expected2 "matrix3: set-column: 1 (allocating)")
  (o= (m:set-column (mid 3) (v 10 20 30) 2) m3-expected3 "matrix3: set-column: 2 (allocating)")
  (o= (m:set-column (mid 4) (v 10 20 30 40) 0) m4-expected1 "matrix4: set-column: 0 (allocating)")
  (o= (m:set-column (mid 4) (v 10 20 30 40) 1) m4-expected2 "matrix4: set-column: 1 (allocating)")
  (o= (m:set-column (mid 4) (v 10 20 30 40) 2) m4-expected3 "matrix4: set-column: 2 (allocating)")
  (o= (m:set-column (mid 4) (v 10 20 30 40) 3) m4-expected4 "matrix4: set-column: 3 (allocating)")
  (m:set-column! (mid 2) (v 10 20) 0 m2-out)
  (o= m2-out m2-expected1 "matrix2: set-column: 0 (in-place)")
  (m:set-column! (mid 2) (v 10 20) 1 m2-out)
  (o= m2-out m2-expected2 "matrix2: set-column: 1 (in-place)")
  (m:set-column! (mid 3) (v 10 20 30) 0 m3-out)
  (o= m3-out m3-expected1 "matrix3: set-column: 0 (in-place)")
  (m:set-column! (mid 3) (v 10 20 30) 1 m3-out)
  (o= m3-out m3-expected2 "matrix3: set-column: 1 (in-place)")
  (m:set-column! (mid 3) (v 10 20 30) 2 m3-out)
  (o= m3-out m3-expected3 "matrix3: set-column: 2 (in-place)")
  (m:set-column! (mid 4) (v 10 20 30 40) 0 m4-out)
  (o= m4-out m4-expected1 "matrix4: set-column: 0 (in-place)")
  (m:set-column! (mid 4) (v 10 20 30 40) 1 m4-out)
  (o= m4-out m4-expected2 "matrix4: set-column: 1 (in-place)")
  (m:set-column! (mid 4) (v 10 20 30 40) 2 m4-out)
  (o= m4-out m4-expected3 "matrix4: set-column: 2 (in-place)")
  (m:set-column! (mid 4) (v 10 20 30 40) 3 m4-out)
  (o= m4-out m4-expected4 "matrix4: set-column: 3 (in-place)"))

(let ((m2-expected (m (v 10 0) (v 0 20)))
      (m2-out (mid 2))
      (m3-expected (m (v 10 0 0) (v 0 20 0) (v 0 0 1)))
      (m3-out (mid 3))
      (m4-expected (m (v 10 0 0 0) (v 0 20 0 0) (v 0 0 30 0) (v 0 0 0 1)))
      (m4-out (mid 4)))
  (o= (m:set-scale (mid 2) (v 10 20)) m2-expected "matrix2: set-scale (allocating)")
  (o= (m:set-scale (mid 3) (v 10 20)) m3-expected "matrix3: set-scale (allocating)")
  (o= (m:set-scale (mid 4) (v 10 20 30)) m4-expected "matrix4: set-scale (allocating)")
  (m:set-scale! (mid 2) (v 10 20) m2-out)
  (o= m2-out m2-expected "matrix2: set-scale (in-place)")
  (m:set-scale! (mid 3) (v 10 20) m3-out)
  (o= m3-out m3-expected "matrix3: set-scale (in-place)")
  (m:set-scale! (mid 4) (v 10 20 30) m4-out)
  (o= m4-out m4-expected "matrix4: set-scale (in-place)"))

(let ((m2 (m (v 1 2) (v 3 4)))
      (m3 (m (v 1 2 3) (v 4 5 6) (v 7 8 9)))
      (m4 (m (v 1 2 3 4) (v 5 6 7 8) (v 9 10 11 12) (v 13 14 15 16))))
  (a= (m:to-array (m:copy m2) :single-float)
      #(1 2 3 4)
      "matrix2: to-array (single-float, allocating)")
  (a= (m:to-array (m:copy m3) :single-float)
      #(1 2 3 4 5 6 7 8 9)
      "matrix3: to-array (single-float, allocating)")
  (a= (m:to-array (m:copy m4) :single-float)
      #(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)
      "matrix4: to-array (single-float, allocating)")
  (a= (m:to-array (m:copy m2) :double-float)
      #(1 2 3 4)
      "matrix2: to-array (double-float, allocating)")
  (a= (m:to-array (m:copy m3) :double-float)
      #(1 2 3 4 5 6 7 8 9)
      "matrix3: to-array (double-float, allocating)")
  (a= (m:to-array (m:copy m4) :double-float)
      #(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)
      "matrix4: to-array (double-float, allocating)")
  (m:to-array! m2 :single-float)
  (m:to-array! m3 :single-float)
  (m:to-array! m4 :single-float)
  (oa= m2 (m::components/single m2) "matrix2: to-array (single-float, in-place)")
  (oa= m3 (m::components/single m3) "matrix3: to-array (single-float, in-place)")
  (oa= m4 (m::components/single m4) "matrix4: to-array (single-float, in-place)")
  (ok (eq (m:to-array! m2 :double-float) (m::components m2))
      "matrix2: to-array (double-float, in-place)")
  (ok (eq (m:to-array! m3 :double-float) (m::components m3))
      "matrix3: to-array (double-float, in-place)")
  (ok (eq (m:to-array! m4 :double-float) (m::components m4))
      "matrix4: to-array (double-float, in-place)"))

(let ((m3-expected (m (v 1 0 0) (v 0 1 0) (v 10 20 1)))
      (m3-out (mid 3))
      (m4-expected (m (v 1 0 0 0) (v 0 1 0 0) (v 0 0 1 0) (v 10 20 30 1)))
      (m4-out (m0 4)))
  (o= (m:set-translation (mid 3) (v 10 20)) m3-expected "matrix3: set-translation (allocating)")
  (o= (m:set-translation (mid 4) (v 10 20 30)) m4-expected "matrix4: set-translation (allocating)")
  (m:set-translation! (mid 3) (v 10 20) m3-out)
  (m:set-translation! (mid 4) (v 10 20 30) m4-out)
  (o= m3-out m3-expected "matrix3: set-translation (in-place)")
  (o= m4-out m4-expected "matrix4: set-translation (in-place)"))

(let ((m2 (m (v 1 2) (v 3 4)))
      (m3 (m (v 1 2 3) (v 4 5 6) (v 7 8 9)))
      (m4 (m (v 1 2 3 4) (v 5 6 7 8) (v 9 10 11 12) (v 13 14 15 16))))
  (s= (m:trace m2) 5 "matrix2: trace")
  (s= (m:trace m3) 15 "matrix3: trace")
  (s= (m:trace m4) 34 "matrix4: trace"))

(let ((m3-expected (m (v 0.5 0.8660254 0) (v -0.8660254 0.5 0) (v -6.160254 9.330127 1)))
      (m3-out (m0 3))
      (m4-expected (m (v 1 0 0 0)
                      (v 0 0.5 0.8660254 0)
                      (v 0 -0.8660254 0.5 0)
                      (v 5 -7.9903817 16.160254 1)))
      (m4-out (m0 4)))
  (o= (m:translate (m:rotate (mid 3) (/ pi 3)) (v 5 10))
      m3-expected
      "matrix3: translate (allocating)")
  (o= (m:translate (m:rotate (mid 4) (v (/ pi 3) 0 0)) (v 5 10 15))
      m4-expected
      "matrix4: translate (allocating)")
  (m:translate! (m:rotate (mid 3) (/ pi 3)) (v 5 10) m3-out)
  (m:translate! (m:rotate (mid 4) (v (/ pi 3) 0 0)) (v 5 10 15) m4-out)
  (o= m3-out m3-expected "matrix3: translate (in-place)")
  (o= m4-out m4-expected "matrix4: translate (in-place)"))

(let ((m2 (m (v 1 2) (v 3 4)))
      (m2-expected (m (v 1 3) (v 2 4)))
      (m2-out (m0 2))
      (m3 (m (v 1 2 3) (v 4 5 6) (v 7 8 9)))
      (m3-expected (m (v 1 4 7) (v 2 5 8) (v 3 6 9)))
      (m3-out (m0 3))
      (m4 (m (v 1 2 3 4) (v 5 6 7 8) (v 9 10 11 12) (v 13 14 15 16)))
      (m4-expected (m (v 1 5 9 13) (v 2 6 10 14) (v 3 7 11 15) (v 4 8 12 16)))
      (m4-out (m0 4)))
  (o= (m:transpose m2) m2-expected "matrix2: transpose (allocating)")
  (o= (m:transpose m3) m3-expected "matrix3: transpose (allocating)")
  (o= (m:transpose m4) m4-expected "matrix4: transpose (allocating)")
  (m:transpose! m2 m2-out)
  (m:transpose! m3 m3-out)
  (m:transpose! m4 m4-out)
  (o= m2-out m2-expected "matrix2: transpose (in-place)")
  (o= m3-out m3-expected "matrix3: transpose (in-place)")
  (o= m4-out m4-expected "matrix4: transpose (in-place)"))

(let ((m2 (m0 2))
      (m2-out (mid 2))
      (m3 (m0 3))
      (m3-out (mid 3))
      (m4 (m0 4))
      (m4-out (mid 4)))
  (ok (not (eq (m:zero m2) m2)) "matrix2: zero (allocating)")
  (ok (not (eq (m:zero m3) m3)) "matrix3: zero (allocating)")
  (ok (not (eq (m:zero m4) m4)) "matrix4: zero (allocating)")
  (m:zero! m2-out)
  (m:zero! m3-out)
  (m:zero! m4-out)
  (ok (not (eq m2 (mid 2))) "matrix2: zero (in-place)")
  (ok (not (eq m3 (mid 3))) "matrix3: zero (in-place)")
  (ok (not (eq m4 (mid 4))) "matrix4: zero (in-place)")
  (ok (m:zero? m2) "matrix2: zero?")
  (ok (m:zero? m3) "matrix3: zero?")
  (ok (m:zero? m4) "matrix4: zero?"))

(finalize)
